<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="pageTitle" xml:space="preserve">
    <value>制物工单明细</value>
  </data>
  <data name="tip1" xml:space="preserve">
    <value>(排除六日)</value>
  </data>
  <data name="tipList1" xml:space="preserve">
    <value>&lt;ul class="list"&gt;
&lt;li&gt;处理状态为「未处理」时可修改资料，其他状态皆不可修改。&lt;/li&gt;
&lt;li&gt;需求发出后，系统会发信通知「行企部」，故不需另外转寄通知该部门。&lt;/li&gt;
&lt;/ul&gt;</value>
  </data>
  <data name="txt_前往處理" xml:space="preserve">
    <value>前往处理</value>
  </data>
  <data name="txt_工作時數" xml:space="preserve">
    <value>工作时数</value>
  </data>
  <data name="txt_希望完成日" xml:space="preserve">
    <value>希望完成日</value>
  </data>
  <data name="txt_未指派" xml:space="preserve">
    <value>处理人员未指派</value>
  </data>
  <data name="txt_無另外通知" xml:space="preserve">
    <value>无另外通知的人员</value>
  </data>
  <data name="txt_登記日期" xml:space="preserve">
    <value>登记日期</value>
  </data>
  <data name="txt_結案日期" xml:space="preserve">
    <value>结案日期</value>
  </data>
  <data name="txt_緊急度" xml:space="preserve">
    <value>紧急度</value>
  </data>
  <data name="txt_處理人員" xml:space="preserve">
    <value>处理人员</value>
  </data>
  <data name="txt_處理狀態" xml:space="preserve">
    <value>处理状态</value>
  </data>
  <data name="txt_處理進度" xml:space="preserve">
    <value>处理进度</value>
  </data>
  <data name="txt_轉寄通知" xml:space="preserve">
    <value>转寄通知</value>
  </data>
  <data name="txt_返回列表" xml:space="preserve">
    <value>返回列表</value>
  </data>
  <data name="txt_追蹤編號" xml:space="preserve">
    <value>追踪编号</value>
  </data>
  <data name="txt_進度說明" xml:space="preserve">
    <value>进度说明</value>
  </data>
  <data name="txt_附件未上傳" xml:space="preserve">
    <value>附件未上传</value>
  </data>
  <data name="txt_附件清單" xml:space="preserve">
    <value>附件列表</value>
  </data>
  <data name="txt_需求數量" xml:space="preserve">
    <value>需求数量</value>
  </data>
  <data name="txt_需求者" xml:space="preserve">
    <value>需求者</value>
  </data>
  <data name="txt_需求資料" xml:space="preserve">
    <value>需求数据</value>
  </data>
  <data name="txt_需求資源" xml:space="preserve">
    <value>需求资源</value>
  </data>
  <data name="txt_需求類別" xml:space="preserve">
    <value>需求类别</value>
  </data>
  <data name="txt_預計完成日" xml:space="preserve">
    <value>预计完成日</value>
  </data>
</root>